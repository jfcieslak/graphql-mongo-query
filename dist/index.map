{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["const defaultKeywords = {\n\t_OR: '$or',\n\t_AND: '$and',\n\t_NOR: '$nor',\n\t_ALL: '$all',\n\t_IN: '$in',\n\t_NIN: '$nin',\n\t_EQ: '$eq',\n\t_NE: '$ne',\n\t_LT: '$lt',\n\t_LTE: '$lte',\n\t_GT: '$gt',\n\t_GTE: '$gte'\n}\nconst defaultValues = {\n\t_EXACT(args) {\n\t\treturn args._EXACT\n\t},\n\t_REGEX(args) {\n\t\treturn RegExp(args._REGEX, args._FLAG)\n\t},\n\t_FLAG(args) {\n\t\tif (!args._REGEX)\n\t\t\tthrow new Error('_FLAG can only be used together with _REGEX filter.')\n\t\treturn RegExp(args._REGEX, args._FLAG)\n\t},\n\t_DATE(args) {\n\t\treturn new Date(args._DATE)\n\t}\n}\n\nexport default class GQLMongoQuery {\n\tdirectTypes: string[]\n\tkeywords: object\n\tvalues: object\n\n\tconstructor(keywords = defaultKeywords, values = defaultValues) {\n\t\tthis.keywords = keywords\n\t\tthis.values = values\n\t\tthis.directTypes = ['string', 'number', 'boolean']\n\t}\n\n\tprivate isOperator(key) {\n\t\treturn ~Object.keys(this.keywords).indexOf(key)\n\t}\n\n\tprivate isValue(val) {\n\t\tif (~this.directTypes.indexOf(typeof val)) return true\n\t\telse if (typeof val === 'object') {\n\t\t\tlet isValue = false\n\t\t\tfor (const k in val) {\n\t\t\t\tif (~Object.keys(this.values).indexOf(k)) isValue = true\n\t\t\t}\n\t\t\treturn isValue\n\t\t} else return false\n\t}\n\n\tprivate argType(key, val) {\n\t\tif (this.isOperator(key)) return 'OPERATOR'\n\t\telse if (this.isValue(val)) return 'VALUE'\n\t\telse if (typeof val === 'object') {\n\t\t\tlet isEmbedded = false\n\t\t\tfor (const k in val) {\n\t\t\t\tif (\n\t\t\t\t\t!this.isOperator(k) &&\n\t\t\t\t\t!this.isValue(val[k])\n\t\t\t\t) {\n\t\t\t\t\tisEmbedded = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isEmbedded) return 'EMBEDDED'\n\t\t\telse return null\n\t\t} else return null\n\t}\n\n\tprivate parseEmbedded(key, val, lastResult = {}) {\n\t\tconst result = lastResult\n\t\tfor (const k in val) {\n\t\t\tconst subkey = key + '.' + k\n\t\t\tconst subval = val[k]\n\t\t\tlet isFinal = false\n\t\t\tfor (const sk in subval) {\n\t\t\t\tconst t = this.argType(sk, subval)\n\t\t\t\tif (t !== 'EMBEDDED') {\n\t\t\t\t\tisFinal = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isFinal) result[subkey] = this.buildFilters(subval)\n\t\t\telse this.parseEmbedded(subkey, subval, result)\n\t\t}\n\t\treturn result\n\t}\n\n\tbuildFilters(args) {\n\t\t// DIRECT VALUES\n\t\tif (~this.directTypes.indexOf(typeof args)) {\n\t\t\treturn args\n\t\t}\n\t\t// COMPUTED VALUES\n\t\telse if (this.isValue(args)) {\n\t\t\tfor (const valueKey in this.values) {\n\t\t\t\tif (args[valueKey]) {\n\t\t\t\t\treturn this.values[valueKey](args)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlet filters = {}\n\n\t\tfor (const key in args) {\n\t\t\tconst val = args[key]\n\t\t\tconst t = this.argType(key, val)\n\t\n\t\t\t// OPERATORS\n\t\t\tif (t === 'OPERATOR') {\n\t\t\t\tconst kw = this.keywords\n\t\t\t\tfor (const k in kw) {\n\t\t\t\t\tif (key === k) {\n\t\t\t\t\t\tif (Array.isArray(val))\n\t\t\t\t\t\t\tfilters[kw[k]] = val.map(v => this.buildFilters(v))\n\t\t\t\t\t\telse filters[kw[k]] = this.buildFilters(val)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// EMBEDED QUERY\n\t\t\telse if (t === 'EMBEDDED') {\n\t\t\t\tfilters = { ...filters, ...this.parseEmbedded(key, val) }\n\t\t\t}\n\t\t\t// go deeper\n\t\t\telse {\n\t\t\t\tfilters[key] = this.buildFilters(val)\n\t\t\t}\n\t\t}\n\t\treturn filters\n\t}\n}\n"]}